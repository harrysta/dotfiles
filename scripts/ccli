#!/bin/sh

# .ccli configuration:
#
# BUILD_TOOL_NAME - the name of the build tool to build the project.
# the build tool must be installed on the system to be usable.
# * cmake
# * meson
# * make
#
# ARGUMENTS - a string that represents the arguments to be passed when running
# the built program
#
# DEBUGGER - the debugger to use 
# * gdb
# * lldb

fn_err() {
  printf "Error: %s\n" "$*" >&2
  exit 1
}

if [ -e ".ccli" ]; then
  printf "Sourcing .ccli\n"
  . "./.ccli"
fi

# build tool

IFS=','
# entries are split by comma in the dict below
btool_dict="cmake:CMakeLists.txt,meson:meson.build,make:Makefile"

if [ -n "$BUILD_TOOL_NAME" ]; then

  printf -- "-- Validating build tool \"%s\"\n" "$BUILD_TOOL_NAME"

  for entry in $btool_dict; do
    name="${entry%%:*}"
    file="${entry#*:}"

    if [ "$name" = "$BUILD_TOOL_NAME" ]; then
      break
    fi

    name=
    file=
  done

  if [ -z "$name" ]; then
    fn_err "\"$BUILD_TOOL_NAME\" was specified, but is not a valid build tool."
  elif [ ! -e "$file" ]; then
    fn_err "\"$BUILD_TOOL_NAME\" was specified, but its build description file \"$file\" does not exist."
  fi

  printf -- "-- Detected \"%s\". Build tool \"%s\" is valid\n" "$file" "$name"
  ccli_btool="$BUILD_TOOL_NAME"

else
  printf -- "-- Guessing build tool\n"

  for entry in $btool_dict; do
    name="${entry%%:*}"
    file="${entry#*:}"

    if [ -e "$file" ]; then
      break
    fi

    name=
    file=
  done

  if [ -n "$file" ]; then
    printf -- "-- Detected \"%s\". Assuming \"%s\"\n" "$file" "$name"
    ccli_btool="$name"
  else
    # TODO: fallback to plain cc
    fn_err "Failed to guess build tool."
  fi
fi

IFS=":"

# debugger

dbg_arr="gdb:lldb"

if [ -n "$DEBUGGER" ]; then
  printf -- "-- Validating debugger \"%s\"\n" "$DEBUGGER"

  for dbg in $dbg_arr; do
    if [ "$dbg" = "$DEBUGGER" ]; then
      break
    fi
    dbg=
  done

  if [ -z "$dbg" ]; then
    fn_err "\"$DEBUGGER\" was specified, but it is not a valid debugger."
  fi
  
  printf -- "-- Debugger \"%s\" is valid\n" "$dbg"
  ccli_dbg="$dbg"

else
  printf -- "-- Searching for debugger\n"

  for dbg in $dbg_arr; do
    if command -v "$dbg" > /dev/null 2>&1; then
      DEBUGGER="$dbg"
      break
    fi
  done

  if [ -z "$DEBUGGER" ]; then
    printf -- "-- No debugger found\n"
  else 
    printf -- "-- Detected debugger \"%s\"\n" "$DEBUGGER"
    ccli_dbg="$DEBUGGER"
  fi
fi

unset IFS

printf "Preparing executable\n"

getparam() {
  cut -d "(" -f2 | cut -d ")" -f1 | awk -v idx="$1" '{print $idx}'
}

case "$ccli_btool" in
  cmake)
    exec_count=$(grep -c add_library "$file")
    if [ "$exec_count" -ne 0 ]; then
      break
    fi

    exec_name=$(grep add_executable "$file" | head -1 | getparam 1)

    if [ "$exec_name" = "\${PROJECT_NAME}" ]; then
      exec_name=$(grep project "$file" | head -1 | getparam 1)
    fi

    ccli_exe="./build/$exec_name"
    ;;

  meson)
    exec_name=$(grep executable meson.build | sed 's/[()]/ /g' \
      | awk '{ print $2 }' | tr -cd '[:alnum:][:blank:]')

    if [ "$exec_name" = "\${PROJECT_NAME}" ]; then
      exec_name=$(grep project meson.build | sed 's/[()]/ /g' \
        | awk '{ print $2 }')
    fi

    ccli_exe="./build/$exec_name"
    ;;
esac

printf "\nC/C++ Command Line Interface on %s\n" "$(uname -s)" 
prompt="$(basename "$(pwd)")> "

fn_cmd() {
  cmd="$1"
  MAGENTA='\e[35m'
  NC='\e[0m'

  printf "\n${MAGENTA}%s${NC}\n" "$cmd"
  command $cmd
}

fn_setup() {
  if [ ! -d "build" ]; then
    if [ -e "build" ]; then
      printf "Error: Setup failed. \"build\" is not a path.\n"
      return
    fi

    fn_cmd "mkdir ./build"
  fi

  case "$ccli_btool" in
    cmake)
      fn_cmd "cmake -B build -S . -DCMAKE_EXPORT_COMPILE_COMMANDS=1"
      fn_cmd "ln -sf ./build/compile_commands.json ./compile_commands.json"
      ;;
    meson)
      fn_cmd "meson setup build"
      ;;
  esac
}

fn_build() {
  case "$ccli_btool" in
    cmake)
      fn_cmd "cmake --build build --parallel 12"
      ;;
    meson)
      fn_cmd "meson compile -C build"
      ;;
    make)
      fn_cmd "make"
      ;;
  esac
}

fn_run() {
  fn_cmd "$ccli_exe $ARGUMENTS"
}

fn_debug() {
  flags=
  case "$ccli_dbg" in
    gdb)
      if [ -e .breakpoints ]; then
        flags="-x .breakpoints"
      fi
      fn_cmd "gdb $flags --args $ccli_exe $ARGUMENTS"
      ;;
    lldb)
      if [ -e .breakpoints ]; then
        flags="-s .breakpoints"
      fi
      fn_cmd "lldb $flags $ccli_exe $ARGUMENTS"
      ;;
  esac
}

fn_clean() {
  fn_cmd "rm -rf build"
}

fn_install() {
  case "$ccli_btool" in
    cmake)
      fn_cmd "sudo -E cmake --install build"
      ;;
    meson)
      ;;
  esac
}

fn_test() {
  case "$ccli_btool" in
    cmake)
      if command -v "ctest" > /dev/null 2>&1; then
        :
      else
        fn_err "Could not run tests; ctest is not installed."
      fi
      ctest --verbose --test-dir build
      ;;
    meson)
      ;;
  esac
}

# start prompting

while true; do
	printf "%s" "$prompt"
	read -r user_input

  if [ -z "$user_input" ]; then
    continue
  fi

  if [ -e ".ccli" ]; then
    . "./.ccli"
  fi

	case "$user_input" in
		c)
			fn_setup
			;;
		b)
			fn_build
			;;
		r)
			fn_run
			;;
    d)
      fn_debug
      ;;
		cb)
			fn_setup && fn_build
			;;
		br)
			fn_build && fn_run
			;;
		cbr)
			fn_setup && fn_build && fn_run
			;;
		cl | clean)
			fn_clean
			;;
		install)
			fn_install
			;;
		test)
			fn_test
			;;
		q|Q)
			exit 0
			;;
		*)
			printf "%s: command not found\n" "$user_input"
			;;
		esac
done
